{
    "pipes": [],
    "interfaces": [
        {
            "name": "Category",
            "id": "interface-Category-0fcd618cff5413683c5d08125c816cfc3301118395685f06f9324bd347aae331246c0a5f17ffc8530a63b2bec82326dc37e2e4f7787961c13c18785692f29b5c",
            "file": "src/app/core/models/category.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Category {\n  id: string;\n  name: string;\n  description: string;\n}\n\nexport const CATEGORIES: Category[] = [\n  {\n    id: 'software-craftsmanship',\n    name: 'Software Craftsmanship',\n    description: 'Questions about TDD, Clean Code, and software design principles'\n  },\n  {\n    id: 'backend-development',\n    name: 'Backend Development',\n    description: 'Questions about server-side programming and architecture'\n  },\n  {\n    id: 'frontend-development',\n    name: 'Frontend Development',\n    description: 'Questions about client-side development and UI/UX'\n  }\n];\n\nexport const QUESTION_COUNT_OPTIONS = [\n  { value: 10, label: '10 Questions' },\n  { value: 25, label: '25 Questions' },\n  { value: 50, label: '50 Questions' }\n];\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Question",
            "id": "interface-Question-5a6a19822a25b3b1b9776c9656d3497ad137462e5667e7ef88cc195a473a81e202d5b5dc8018ddb70c33452340246f9fc75aea4c0a83c0e8b6bd5e72700d89e6",
            "file": "src/app/core/entities/question.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Question {\n  id: number;\n  text: string;\n  category: string;\n  isAnswered: boolean;\n  isCorrect?: boolean;\n}\n\nexport class QuestionImpl implements Question {\n  constructor(\n    public id: number,\n    public text: string,\n    public category: string,\n    public isAnswered: boolean = false,\n    isCorrect?: boolean\n  ) {}\n}\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isAnswered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isCorrect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "QuestionRepository",
            "id": "interface-QuestionRepository-c486d5a8a4ac4df80ab655b30544238f379289133e2ed1e56cea2dd0e314b6884772abe0bcae035b59f10975b2c88e381ed94f37da13cc6fdd09d1363e3abc24",
            "file": "src/app/core/repositories/question.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Question } from '../entities/question.entity';\n\nexport interface QuestionRepository {\n  getQuestions(): Observable<Question[]>;\n  getQuestionsByCategory(category: string): Observable<Question[]>;\n  markAsAnswered(id: number, isCorrect: boolean): Observable<void>;\n  getCategories(): Observable<string[]>;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getQuestions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Question[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getQuestionsByCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Question[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsAnswered",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "GetQuestionsByCategoryUseCase",
            "id": "injectable-GetQuestionsByCategoryUseCase-f24e156874ef8fe5401dd570ccd4fc9a7be45b9576bcd8c9b6a3acf6b8d198158f77ebf180998d56c681e4a965da1b9aa8c2b573b6afec9f0d3c297b7d6a146a",
            "file": "src/app/core/use-cases/get-questions-by-category.use-case.ts",
            "properties": [],
            "methods": [
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Question[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { QuestionRepository } from '../repositories/question.repository';\nimport { Question } from '../entities/question.entity';\nimport { IQuestionRepository } from 'src/app/app.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GetQuestionsByCategoryUseCase {\n  constructor(@Inject(IQuestionRepository) private questionRepository: QuestionRepository) {}\n\n  execute(category: string): Observable<Question[]> {\n    return this.questionRepository.getQuestionsByCategory(category);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "questionRepository",
                        "type": "QuestionRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "questionRepository",
                        "type": "QuestionRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GetQuestionsUseCase",
            "id": "injectable-GetQuestionsUseCase-85c4de0ce4c6949a874ceddc063767dea80ce26c02bd63ab729cdc8136e567ce4b541a60003d24fd16aa68482bdd5e7d641feb07bf6dbde21e617190e898d1ea",
            "file": "src/app/core/use-cases/get-questions.use-case.ts",
            "properties": [],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Question[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { QuestionRepository } from '../repositories/question.repository';\nimport { Question } from '../entities/question.entity';\nimport { IQuestionRepository } from 'src/app/app.module';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GetQuestionsUseCase {\n  constructor(@Inject(IQuestionRepository) private questionRepository: QuestionRepository) {}\n\n  execute(): Observable<Question[]> {\n    return this.questionRepository.getQuestions();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "questionRepository",
                        "type": "QuestionRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "questionRepository",
                        "type": "QuestionRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MarkQuestionAnsweredUseCase",
            "id": "injectable-MarkQuestionAnsweredUseCase-402e0e7415d990ce6461901b40bb9c7f131c9bb54a7dcbb565fbe7cb374494170e4d3a8003c2cd84b68ff5367c52e87f4e2314cc2c4fbf79ae26e51445e74b27",
            "file": "src/app/core/use-cases/mark-questions-answered.use-case.ts",
            "properties": [],
            "methods": [
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { QuestionRepository } from '../repositories/question.repository';\nimport { IQuestionRepository } from 'src/app/app.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MarkQuestionAnsweredUseCase {\n  constructor(@Inject(IQuestionRepository) private questionRepository: QuestionRepository) {}\n\n  execute(id: number, isCorrect: boolean): Observable<void> {\n    return this.questionRepository.markAsAnswered(id, isCorrect);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "questionRepository",
                        "type": "QuestionRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "questionRepository",
                        "type": "QuestionRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "QuestionRepositoryImpl",
            "id": "injectable-QuestionRepositoryImpl-04b021710030fab6d9f13af7677bf4676cd160a726c7e2dc0ec4f7a3175eaf8b69ca9fa75863c6f2f048ff66455582ae8b505fffd530f393f8f1d1f65f9884cc",
            "file": "src/app/infrastructure/repositories/question.repository.impl.ts",
            "properties": [
                {
                    "name": "questions",
                    "defaultValue": "generateQuestions()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Question[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getQuestionsByCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Question[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsAnswered",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Question } from 'src/app/core/entities/question.entity';\nimport { generateQuestions } from './questions-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionRepositoryImpl implements QuestionRepositoryImpl {\n  private questions: Question[] = generateQuestions();\n\n  getQuestionsByCategory(category: string): Observable<Question[]> {\n    return of(this.questions.filter(q => q.category === category));\n  }\n\n  markAsAnswered(id: number, isCorrect: boolean): Observable<void> {\n    const question = this.questions.find(q => q.id === id);\n    if (question) {\n      question.isAnswered = true;\n      question.isCorrect = isCorrect;\n    }\n    return of(void 0);\n  }\n\n  getCategories(): Observable<string[]> {\n    return of([...new Set(this.questions.map(q => q.category))]);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "QuestionImpl",
            "id": "class-QuestionImpl-5a6a19822a25b3b1b9776c9656d3497ad137462e5667e7ef88cc195a473a81e202d5b5dc8018ddb70c33452340246f9fc75aea4c0a83c0e8b6bd5e72700d89e6",
            "file": "src/app/core/entities/question.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface Question {\n  id: number;\n  text: string;\n  category: string;\n  isAnswered: boolean;\n  isCorrect?: boolean;\n}\n\nexport class QuestionImpl implements Question {\n  constructor(\n    public id: number,\n    public text: string,\n    public category: string,\n    public isAnswered: boolean = false,\n    isCorrect?: boolean\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "category",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isAnswered",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "isCorrect",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "category",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isAnswered",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isCorrect",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isAnswered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Question"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-fe9f45aec8ca733a9193e159a6dcd3725560c5a97bca410734612fd860995b1b19d7edae500f9091d90b5cca0c3162567600156da476a707511114bbf21a8fd8",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'questions-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'questions-app';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"min-h-screen bg-gray-50\">\n  <header class=\"bg-white shadow\">\n    <div class=\"container mx-auto px-4 py-6\">\n    </div>\n  </header>\n  <app-navigation></app-navigation>\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CategorySelectionComponent",
            "id": "component-CategorySelectionComponent-d5b0530fc04fbb5d4e9529945914bb18c289c0f1735232f5ff5123791ceef9a1c69ec9d5e00a1eb7a12338bfcf341d94bc812a5be504d39138934292c5da5688",
            "file": "src/app/category-selection/category-selection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-selection",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"space-y-8\">\n  <div class=\"mb-8\">\n    <h3 class=\"text-lg font-semibold mb-4\">Choose number of questions you want for today ?</h3>\n    <div class=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n      <button *ngFor=\"let option of questionCountOptions\"\n              (click)=\"selectQuestionCount(option.value)\"\n              [class]=\"getQuestionCountButtonClass(option.value)\">\n        {{ option.label }}\n      </button>\n    </div>\n  </div>\n\n  <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n    <div *ngFor=\"let category of categories\"\n         (click)=\"onCategorySelect(category)\"\n         [class]=\"getCategoryCardClass()\">\n      <h3 class=\"text-xl font-semibold mb-2\">{{ category.name }}</h3>\n      <p class=\"text-gray-600\">{{ category.description }}</p>\n      <div class=\"mt-4 text-sm text-gray-500\" *ngIf=\"selectedQuestionCount\">\n        Selected: {{ selectedQuestionCount }} questions\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "categorySelected",
                    "defaultValue": "new EventEmitter<{categoryId: string, questionCount: number}>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "CATEGORIES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "questionCountOptions",
                    "defaultValue": "QUESTION_COUNT_OPTIONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selectedQuestionCount",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "getCategoryCardClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getQuestionCountButtonClass",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCategorySelect",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectQuestionCount",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CATEGORIES, QUESTION_COUNT_OPTIONS, Category } from '../core/models/category.model';\n\n@Component({\n  selector: 'app-category-selection',\n  template: `\n    <div class=\"space-y-8\">\n      <div class=\"mb-8\">\n        <h3 class=\"text-lg font-semibold mb-4\">Choose number of questions you want for today ?</h3>\n        <div class=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <button *ngFor=\"let option of questionCountOptions\"\n                  (click)=\"selectQuestionCount(option.value)\"\n                  [class]=\"getQuestionCountButtonClass(option.value)\">\n            {{ option.label }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div *ngFor=\"let category of categories\"\n             (click)=\"onCategorySelect(category)\"\n             [class]=\"getCategoryCardClass()\">\n          <h3 class=\"text-xl font-semibold mb-2\">{{ category.name }}</h3>\n          <p class=\"text-gray-600\">{{ category.description }}</p>\n          <div class=\"mt-4 text-sm text-gray-500\" *ngIf=\"selectedQuestionCount\">\n            Selected: {{ selectedQuestionCount }} questions\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CategorySelectionComponent {\n  categories = CATEGORIES;\n  questionCountOptions = QUESTION_COUNT_OPTIONS;\n  selectedQuestionCount: number | null = null;\n\n  @Output() categorySelected = new EventEmitter<{categoryId: string, questionCount: number}>();\n\n  selectQuestionCount(count: number) {\n    this.selectedQuestionCount = count;\n  }\n\n  onCategorySelect(category: Category) {\n    if (this.selectedQuestionCount) {\n      this.categorySelected.emit({\n        categoryId: category.id,\n        questionCount: this.selectedQuestionCount\n      });\n    }\n  }\n\n  getQuestionCountButtonClass(count: number): string {\n    const baseClass = 'px-4 py-2 rounded-lg transition-colors text-center';\n    return count === this.selectedQuestionCount\n      ? `${baseClass} bg-blue-600 text-white`\n      : `${baseClass} bg-gray-100 hover:bg-gray-200 text-gray-800`;\n  }\n\n  getCategoryCardClass(): string {\n    const baseClass = 'p-6 bg-white rounded-lg shadow-md transition-all';\n    return this.selectedQuestionCount\n      ? `${baseClass} hover:shadow-lg cursor-pointer`\n      : `${baseClass} opacity-50 cursor-not-allowed`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "LandingPageComponent",
            "id": "component-LandingPageComponent-45c6efb2e072ec8211f901da0a3e34e7ceb1a1849619a9ad0c3dc80a71f59fe467263993b8958aa662f3f8db48915678ffa5443544759240f14a47b535ee5aff",
            "file": "src/app/landing-page/landing-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing-page",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"bg-gradient-to-b from-blue-50 to-white\">\n  <div class=\"container mx-auto px-4 py-16\">\n    <div class=\"text-center max-w-3xl mx-auto\">\n      <h1 class=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n        Master Your Technical Interviews\n      </h1>\n      <p class=\"text-xl text-gray-600 mb-8\">\n        Practice with 500+ real-world technical interview questions across software craftsmanship,\n        backend development, and frontend development.\n      </p>\n      <a routerLink=\"/questions\"\n         class=\"inline-block bg-blue-600 text-white px-8 py-3 rounded-lg\n                hover:bg-blue-700 transition-colors\">\n        Start Practicing\n      </a>\n    </div>\n\n    <div class=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8\">\n      <div class=\"bg-white p-6 rounded-lg shadow-md\">\n        <h3 class=\"text-xl font-semibold mb-4\">Software Craftsmanship</h3>\n        <p class=\"text-gray-600\">Master clean code, TDD, and software design principles.</p>\n      </div>\n      <div class=\"bg-white p-6 rounded-lg shadow-md\">\n        <h3 class=\"text-xl font-semibold mb-4\">Backend Development</h3>\n        <p class=\"text-gray-600\">Deep dive into architecture, databases, and system design.</p>\n      </div>\n      <div class=\"bg-white p-6 rounded-lg shadow-md\">\n        <h3 class=\"text-xl font-semibold mb-4\">Frontend Development</h3>\n        <p class=\"text-gray-600\">Learn modern frameworks, patterns, and best practices.</p>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-landing-page',\n  template: `\n    <div class=\"bg-gradient-to-b from-blue-50 to-white\">\n      <div class=\"container mx-auto px-4 py-16\">\n        <div class=\"text-center max-w-3xl mx-auto\">\n          <h1 class=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            Master Your Technical Interviews\n          </h1>\n          <p class=\"text-xl text-gray-600 mb-8\">\n            Practice with 500+ real-world technical interview questions across software craftsmanship,\n            backend development, and frontend development.\n          </p>\n          <a routerLink=\"/questions\"\n             class=\"inline-block bg-blue-600 text-white px-8 py-3 rounded-lg\n                    hover:bg-blue-700 transition-colors\">\n            Start Practicing\n          </a>\n        </div>\n\n        <div class=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div class=\"bg-white p-6 rounded-lg shadow-md\">\n            <h3 class=\"text-xl font-semibold mb-4\">Software Craftsmanship</h3>\n            <p class=\"text-gray-600\">Master clean code, TDD, and software design principles.</p>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow-md\">\n            <h3 class=\"text-xl font-semibold mb-4\">Backend Development</h3>\n            <p class=\"text-gray-600\">Deep dive into architecture, databases, and system design.</p>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow-md\">\n            <h3 class=\"text-xl font-semibold mb-4\">Frontend Development</h3>\n            <p class=\"text-gray-600\">Learn modern frameworks, patterns, and best practices.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class LandingPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-d650bfa4c34c2021c43bbe7b43f1d084c6653e510aca087ee8f481ad2ecac1482a56c2630330b4870601dbcf4954596651041b99a41eca525dd8d76c2254d6f5",
            "file": "src/app/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [],
            "styles": [],
            "template": "<nav class=\"bg-white shadow-lg\">\n  <div class=\"container mx-auto px-4\">\n    <div class=\"flex justify-between items-center h-16\">\n      <div class=\"flex items-center\">\n        <a routerLink=\"/\" class=\"text-xl font-bold text-gray-800\">\n          TechInterviewer\n        </a>\n      </div>\n      <div class=\"flex space-x-4\">\n        <a routerLink=\"/questions\"\n           routerLinkActive=\"text-blue-600\"\n           class=\"px-3 py-2 rounded-md text-gray-700 hover:text-gray-900\">\n          Practice\n        </a>\n        <a routerLink=\"/pricing\"\n           routerLinkActive=\"text-blue-600\"\n           class=\"px-3 py-2 rounded-md text-gray-700 hover:text-gray-900\">\n          Pricing\n        </a>\n      </div>\n    </div>\n  </div>\n</nav>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-navigation',\n  template: `\n    <nav class=\"bg-white shadow-lg\">\n      <div class=\"container mx-auto px-4\">\n        <div class=\"flex justify-between items-center h-16\">\n          <div class=\"flex items-center\">\n            <a routerLink=\"/\" class=\"text-xl font-bold text-gray-800\">\n              TechInterviewer\n            </a>\n          </div>\n          <div class=\"flex space-x-4\">\n            <a routerLink=\"/questions\"\n               routerLinkActive=\"text-blue-600\"\n               class=\"px-3 py-2 rounded-md text-gray-700 hover:text-gray-900\">\n              Practice\n            </a>\n            <a routerLink=\"/pricing\"\n               routerLinkActive=\"text-blue-600\"\n               class=\"px-3 py-2 rounded-md text-gray-700 hover:text-gray-900\">\n              Pricing\n            </a>\n          </div>\n        </div>\n      </div>\n    </nav>\n  `\n})\nexport class NavigationComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PricingPageComponent",
            "id": "component-PricingPageComponent-32a3a02921f7ead85f26ba7ce2d9b03caa03ec0d660cd86dc1a5b965d2c8f11b42bcc110bbb188b749abd0d3098974b176405b670a805331d1d33d1d3e51e52d",
            "file": "src/app/pricing-page/pricing-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pricing-page",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"bg-gray-50 py-16\">\n  <div class=\"container mx-auto px-4\">\n    <h2 class=\"text-3xl font-bold text-center mb-12\">Choose Your Plan</h2>\n\n    <div class=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n      <div class=\"bg-white rounded-lg shadow-md p-8\">\n        <h3 class=\"text-xl font-semibold mb-4\">Basic</h3>\n        <p class=\"text-3xl font-bold mb-6\">Free</p>\n        <ul class=\"space-y-3 mb-8\">\n          <li class=\"flex items-center\">\n            <span class=\"text-green-500 mr-2\">✓</span>\n            Access to 50 questions\n          </li>\n          <li class=\"flex items-center\">\n            <span class=\"text-green-500 mr-2\">✓</span>\n            Basic progress tracking\n          </li>\n        </ul>\n        <a routerLink=\"/questions\"\n           class=\"block text-center bg-gray-100 text-gray-800 px-6 py-2 rounded-lg\n                  hover:bg-gray-200 transition-colors\">\n          Start Free\n        </a>\n      </div>\n\n      <div class=\"bg-white rounded-lg shadow-md p-8 border-2 border-blue-500\">\n        <h3 class=\"text-xl font-semibold mb-4\">Pro</h3>\n        <p class=\"text-3xl font-bold mb-6\">$19/mo</p>\n        <ul class=\"space-y-3 mb-8\">\n          <li class=\"flex items-center\">\n            <span class=\"text-green-500 mr-2\">✓</span>\n            Access to all 500+ questions\n          </li>\n          <li class=\"flex items-center\">\n            <span class=\"text-green-500 mr-2\">✓</span>\n            Detailed progress analytics\n          </li>\n          <li class=\"flex items-center\">\n            <span class=\"text-green-500 mr-2\">✓</span>\n            Custom study paths\n          </li>\n        </ul>\n        <button\n          class=\"w-full bg-blue-600 text-white px-6 py-2 rounded-lg\n                 hover:bg-blue-700 transition-colors\">\n          Get Pro\n        </button>\n      </div>\n\n      <div class=\"bg-white rounded-lg shadow-md p-8\">\n        <h3 class=\"text-xl font-semibold mb-4\">Team</h3>\n        <p class=\"text-3xl font-bold mb-6\">$49/mo</p>\n        <ul class=\"space-y-3 mb-8\">\n          <li class=\"flex items-center\">\n            <span class=\"text-green-500 mr-2\">✓</span>\n            Everything in Pro\n          </li>\n          <li class=\"flex items-center\">\n            <span class=\"text-green-500 mr-2\">✓</span>\n            Team progress tracking\n          </li>\n          <li class=\"flex items-center\">\n            <span class=\"text-green-500 mr-2\">✓</span>\n            Custom question sets\n          </li>\n        </ul>\n        <button\n          class=\"w-full bg-gray-100 text-gray-800 px-6 py-2 rounded-lg\n                 hover:bg-gray-200 transition-colors\">\n          Contact Sales\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-pricing-page',\n  template: `\n    <div class=\"bg-gray-50 py-16\">\n      <div class=\"container mx-auto px-4\">\n        <h2 class=\"text-3xl font-bold text-center mb-12\">Choose Your Plan</h2>\n\n        <div class=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n          <div class=\"bg-white rounded-lg shadow-md p-8\">\n            <h3 class=\"text-xl font-semibold mb-4\">Basic</h3>\n            <p class=\"text-3xl font-bold mb-6\">Free</p>\n            <ul class=\"space-y-3 mb-8\">\n              <li class=\"flex items-center\">\n                <span class=\"text-green-500 mr-2\">✓</span>\n                Access to 50 questions\n              </li>\n              <li class=\"flex items-center\">\n                <span class=\"text-green-500 mr-2\">✓</span>\n                Basic progress tracking\n              </li>\n            </ul>\n            <a routerLink=\"/questions\"\n               class=\"block text-center bg-gray-100 text-gray-800 px-6 py-2 rounded-lg\n                      hover:bg-gray-200 transition-colors\">\n              Start Free\n            </a>\n          </div>\n\n          <div class=\"bg-white rounded-lg shadow-md p-8 border-2 border-blue-500\">\n            <h3 class=\"text-xl font-semibold mb-4\">Pro</h3>\n            <p class=\"text-3xl font-bold mb-6\">$19/mo</p>\n            <ul class=\"space-y-3 mb-8\">\n              <li class=\"flex items-center\">\n                <span class=\"text-green-500 mr-2\">✓</span>\n                Access to all 500+ questions\n              </li>\n              <li class=\"flex items-center\">\n                <span class=\"text-green-500 mr-2\">✓</span>\n                Detailed progress analytics\n              </li>\n              <li class=\"flex items-center\">\n                <span class=\"text-green-500 mr-2\">✓</span>\n                Custom study paths\n              </li>\n            </ul>\n            <button\n              class=\"w-full bg-blue-600 text-white px-6 py-2 rounded-lg\n                     hover:bg-blue-700 transition-colors\">\n              Get Pro\n            </button>\n          </div>\n\n          <div class=\"bg-white rounded-lg shadow-md p-8\">\n            <h3 class=\"text-xl font-semibold mb-4\">Team</h3>\n            <p class=\"text-3xl font-bold mb-6\">$49/mo</p>\n            <ul class=\"space-y-3 mb-8\">\n              <li class=\"flex items-center\">\n                <span class=\"text-green-500 mr-2\">✓</span>\n                Everything in Pro\n              </li>\n              <li class=\"flex items-center\">\n                <span class=\"text-green-500 mr-2\">✓</span>\n                Team progress tracking\n              </li>\n              <li class=\"flex items-center\">\n                <span class=\"text-green-500 mr-2\">✓</span>\n                Custom question sets\n              </li>\n            </ul>\n            <button\n              class=\"w-full bg-gray-100 text-gray-800 px-6 py-2 rounded-lg\n                     hover:bg-gray-200 transition-colors\">\n              Contact Sales\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class PricingPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-840c8bb83772bfd8e8fd7e13d89051b6c7761b995701540537076710673a273d62f2b3d192c1123bafad4d938226454c622ebd44683a2e1e6de8500052fae9af",
            "file": "src/app/question-list/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"mt-6\">\n  <div class=\"bg-gray-200 rounded-full h-2.5\">\n    <div class=\"bg-blue-600 h-2.5 rounded-full\"\n         [style.width]=\"percentage + '%'\">\n    </div>\n  </div>\n  <p class=\"text-center mt-2\">\n    Progress: {{ current }}/{{ total }} questions\n  </p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "current",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "percentage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "total",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-progress-bar',\n  template: `\n    <div class=\"mt-6\">\n      <div class=\"bg-gray-200 rounded-full h-2.5\">\n        <div class=\"bg-blue-600 h-2.5 rounded-full\"\n             [style.width]=\"percentage + '%'\">\n        </div>\n      </div>\n      <p class=\"text-center mt-2\">\n        Progress: {{ current }}/{{ total }} questions\n      </p>\n    </div>\n  `\n})\nexport class ProgressBarComponent {\n  @Input() current: number = 0;\n  @Input() total: number = 0;\n  @Input() percentage: number = 0;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "QuestionCardComponent",
            "id": "component-QuestionCardComponent-0c10969432597e4793f1abd30a21258881b777426f0b889a004efdcf0476a3d1fe70e5b482cad558bb7709b74954644e69380e143f7abd5fe68b035f5723c039",
            "file": "src/app/question-list/question-card/question-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-question-card",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"p-4 bg-white rounded-lg shadow-md\">\n  <div class=\"flex items-center justify-between mb-4\">\n    <h3 class=\"text-lg font-semibold\">{{ question.text }}</h3>\n    <span class=\"px-3 py-1 text-sm rounded-full\"\n          [ngClass]=\"getStatusClass()\">\n      {{ question.category }}\n    </span>\n  </div>\n  <div class=\"flex justify-end space-x-2\" *ngIf=\"!question.isAnswered\">\n    <button\n      (click)=\"onAnswer(true)\"\n      class=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors\">\n      Correct Answer\n    </button>\n    <button\n      (click)=\"onAnswer(false)\"\n      class=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors\">\n      Incorrect Answer\n    </button>\n  </div>\n  <div *ngIf=\"question.isAnswered\" class=\"mt-2\">\n    <p [ngClass]=\"question.isCorrect ? 'text-green-600' : 'text-red-600'\">\n      {{ question.isCorrect ? '✓ Answered correctly' : '✗ Answered incorrectly' }}\n    </p>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "question",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "Question",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "answered",
                    "defaultValue": "new EventEmitter<{ id: number; isCorrect: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getStatusClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnswer",
                    "args": [
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Question } from 'src/app/core/entities/question.entity';\n\n@Component({\n  selector: 'app-question-card',\n  template: `\n    <div class=\"p-4 bg-white rounded-lg shadow-md\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <h3 class=\"text-lg font-semibold\">{{ question.text }}</h3>\n        <span class=\"px-3 py-1 text-sm rounded-full\"\n              [ngClass]=\"getStatusClass()\">\n          {{ question.category }}\n        </span>\n      </div>\n      <div class=\"flex justify-end space-x-2\" *ngIf=\"!question.isAnswered\">\n        <button\n          (click)=\"onAnswer(true)\"\n          class=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors\">\n          Correct Answer\n        </button>\n        <button\n          (click)=\"onAnswer(false)\"\n          class=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors\">\n          Incorrect Answer\n        </button>\n      </div>\n      <div *ngIf=\"question.isAnswered\" class=\"mt-2\">\n        <p [ngClass]=\"question.isCorrect ? 'text-green-600' : 'text-red-600'\">\n          {{ question.isCorrect ? '✓ Answered correctly' : '✗ Answered incorrectly' }}\n        </p>\n      </div>\n    </div>\n  `\n})\nexport class QuestionCardComponent {\n  @Input() question!: Question;\n  @Output() answered = new EventEmitter<{ id: number; isCorrect: boolean }>();\n\n  onAnswer(isCorrect: boolean) {\n    this.answered.emit({ id: this.question.id, isCorrect });\n  }\n\n  getStatusClass(): string {\n    if (!this.question.isAnswered) {\n      return 'bg-blue-100 text-blue-800';\n    }\n    return this.question.isCorrect\n      ? 'bg-green-100 text-green-800'\n      : 'bg-red-100 text-red-800';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "QuestionListComponent",
            "id": "component-QuestionListComponent-fb10f1de93ece3c9f3cfe474707ca4df8afac7626df31cbe16ba41705a259016e171a0391a9cc8f326e8b55210df4eec14d8febc05064f098e68c6d405f6e2c3",
            "file": "src/app/question-list/question-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-question-list",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"container mx-auto px-4 py-8\">\n  <div *ngIf=\"!selectedCategory\" class=\"mb-8\">\n    <h2 class=\"text-2xl font-bold mb-6\">Select a Category</h2>\n    <app-category-selection\n      (categorySelected)=\"onCategorySelected($event)\">\n    </app-category-selection>\n  </div>\n\n  <div *ngIf=\"selectedCategory && questions.length > 0\">\n    <div class=\"mb-8\">\n      <button\n        (click)=\"resetCategory()\"\n        class=\"text-blue-600 hover:text-blue-800\">\n        ← Back to Categories\n      </button>\n    </div>\n\n    <app-question-viewer\n      [questions]=\"questions\"\n      (answered)=\"onQuestionAnswered($event)\">\n    </app-question-viewer>\n\n    <app-progress-bar\n      [current]=\"answeredCount\"\n      [total]=\"totalQuestions\"\n      [percentage]=\"progressPercentage\">\n    </app-progress-bar>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "questions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Question[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "selectedCategory",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "onCategorySelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onQuestionAnswered",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CategorySelectionComponent } from '../category-selection/category-selection.component';\nimport { QuestionViewerComponent } from '../question-viewer/question-viewer.component';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\nimport { Question } from '../core/entities/question.entity';\nimport { GetQuestionsByCategoryUseCase } from '../core/use-cases/get-questions-by-category.use-case';\nimport { MarkQuestionAnsweredUseCase } from '../core/use-cases/mark-questions-answered.use-case';\n\n@Component({\n  selector: 'app-question-list',\n  template: `\n    <div class=\"container mx-auto px-4 py-8\">\n      <div *ngIf=\"!selectedCategory\" class=\"mb-8\">\n        <h2 class=\"text-2xl font-bold mb-6\">Select a Category</h2>\n        <app-category-selection\n          (categorySelected)=\"onCategorySelected($event)\">\n        </app-category-selection>\n      </div>\n\n      <div *ngIf=\"selectedCategory && questions.length > 0\">\n        <div class=\"mb-8\">\n          <button\n            (click)=\"resetCategory()\"\n            class=\"text-blue-600 hover:text-blue-800\">\n            ← Back to Categories\n          </button>\n        </div>\n\n        <app-question-viewer\n          [questions]=\"questions\"\n          (answered)=\"onQuestionAnswered($event)\">\n        </app-question-viewer>\n\n        <app-progress-bar\n          [current]=\"answeredCount\"\n          [total]=\"totalQuestions\"\n          [percentage]=\"progressPercentage\">\n        </app-progress-bar>\n      </div>\n    </div>\n  `\n})\nexport class QuestionListComponent {\n  selectedCategory: string | null = null;\n  questions: Question[] = [];\n\n  get answeredCount(): number {\n    return this.questions.filter(q => q.isAnswered).length;\n  }\n\n  get totalQuestions(): number {\n    return this.questions.length;\n  }\n\n  get progressPercentage(): number {\n    return (this.answeredCount / this.totalQuestions) * 100;\n  }\n\n  constructor(\n    private getQuestionsByCategoryUseCase: GetQuestionsByCategoryUseCase,\n    private markQuestionAnsweredUseCase: MarkQuestionAnsweredUseCase\n  ) {}\n\n  onCategorySelected(event: {categoryId: string, questionCount: number}) {\n    this.selectedCategory = event.categoryId;\n    this.getQuestionsByCategoryUseCase.execute(event.categoryId).subscribe(\n      questions => {\n        this.questions = questions.slice(0, event.questionCount);\n      }\n    );\n  }\n\n  resetCategory() {\n    this.selectedCategory = null;\n    this.questions = [];\n  }\n\n  onQuestionAnswered(event: { id: number; isCorrect: boolean }) {\n    this.markQuestionAnsweredUseCase.execute(event.id, event.isCorrect)\n      .subscribe(() => {\n        const question = this.questions.find(q => q.id === event.id);\n        if (question) {\n          question.isAnswered = true;\n          question.isCorrect = event.isCorrect;\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "getQuestionsByCategoryUseCase",
                        "type": "GetQuestionsByCategoryUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "markQuestionAnsweredUseCase",
                        "type": "MarkQuestionAnsweredUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "getQuestionsByCategoryUseCase",
                        "type": "GetQuestionsByCategoryUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "markQuestionAnsweredUseCase",
                        "type": "MarkQuestionAnsweredUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "answeredCount": {
                    "name": "answeredCount",
                    "getSignature": {
                        "name": "answeredCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 48
                    }
                },
                "totalQuestions": {
                    "name": "totalQuestions",
                    "getSignature": {
                        "name": "totalQuestions",
                        "type": "number",
                        "returnType": "number",
                        "line": 52
                    }
                },
                "progressPercentage": {
                    "name": "progressPercentage",
                    "getSignature": {
                        "name": "progressPercentage",
                        "type": "number",
                        "returnType": "number",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "QuestionViewerComponent",
            "id": "component-QuestionViewerComponent-e7b1833d95cc910e9659b5031b6ebb7bd46ee34f2c7c07d65bc977be0aa60a721d6921a566247a65ccbc1cf2c7fd19895fe2e6bc740601e0ab424a69988239c1",
            "file": "src/app/question-viewer/question-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-question-viewer",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"bg-white rounded-lg shadow-md p-6\">\n  <div class=\"flex justify-between items-center mb-6\">\n    <button\n      (click)=\"previousQuestion()\"\n      [disabled]=\"currentIndex === 0\"\n      class=\"px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50\">\n      ← Previous\n    </button>\n    <span class=\"text-gray-600\">Question {{ currentIndex + 1 }} of {{ totalQuestions }}</span>\n    <button\n      (click)=\"nextQuestion()\"\n      [disabled]=\"currentIndex === totalQuestions - 1\"\n      class=\"px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50\">\n      Next →\n    </button>\n  </div>\n\n  <div class=\"mb-8\">\n    <h3 class=\"text-xl font-semibold mb-4\">{{ currentQuestion?.text }}</h3>\n  </div>\n\n  <div class=\"flex justify-end space-x-4\" *ngIf=\"!currentQuestion?.isAnswered\">\n    <button\n      (click)=\"onAnswer(false)\"\n      class=\"px-6 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors\">\n      Incorrect\n    </button>\n    <button\n      (click)=\"onAnswer(true)\"\n      class=\"px-6 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors\">\n      Correct\n    </button>\n  </div>\n\n  <div *ngIf=\"currentQuestion?.isAnswered\" class=\"mt-4\">\n    <p [ngClass]=\"currentQuestion?.isCorrect ? 'text-green-600' : 'text-red-600'\">\n      {{ currentQuestion?.isCorrect ? '✓ Answered correctly' : '✗ Answered incorrectly' }}\n    </p>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "questions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "Question[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "answered",
                    "defaultValue": "new EventEmitter<{ id: number; isCorrect: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "nextQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnswer",
                    "args": [
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isCorrect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previousQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Question } from '../core/entities/question.entity';\n\n@Component({\n  selector: 'app-question-viewer',\n  template: `\n    <div class=\"bg-white rounded-lg shadow-md p-6\">\n      <div class=\"flex justify-between items-center mb-6\">\n        <button\n          (click)=\"previousQuestion()\"\n          [disabled]=\"currentIndex === 0\"\n          class=\"px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50\">\n          ← Previous\n        </button>\n        <span class=\"text-gray-600\">Question {{ currentIndex + 1 }} of {{ totalQuestions }}</span>\n        <button\n          (click)=\"nextQuestion()\"\n          [disabled]=\"currentIndex === totalQuestions - 1\"\n          class=\"px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50\">\n          Next →\n        </button>\n      </div>\n\n      <div class=\"mb-8\">\n        <h3 class=\"text-xl font-semibold mb-4\">{{ currentQuestion?.text }}</h3>\n      </div>\n\n      <div class=\"flex justify-end space-x-4\" *ngIf=\"!currentQuestion?.isAnswered\">\n        <button\n          (click)=\"onAnswer(false)\"\n          class=\"px-6 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors\">\n          Incorrect\n        </button>\n        <button\n          (click)=\"onAnswer(true)\"\n          class=\"px-6 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors\">\n          Correct\n        </button>\n      </div>\n\n      <div *ngIf=\"currentQuestion?.isAnswered\" class=\"mt-4\">\n        <p [ngClass]=\"currentQuestion?.isCorrect ? 'text-green-600' : 'text-red-600'\">\n          {{ currentQuestion?.isCorrect ? '✓ Answered correctly' : '✗ Answered incorrectly' }}\n        </p>\n      </div>\n    </div>\n  `\n})\nexport class QuestionViewerComponent {\n  @Input() questions: Question[] = [];\n  @Output() answered = new EventEmitter<{ id: number; isCorrect: boolean }>();\n\n  currentIndex = 0;\n\n  get currentQuestion(): Question | undefined {\n    return this.questions[this.currentIndex];\n  }\n\n  get totalQuestions(): number {\n    return this.questions.length;\n  }\n\n  previousQuestion() {\n    if (this.currentIndex > 0) {\n      this.currentIndex--;\n    }\n  }\n\n  nextQuestion() {\n    if (this.currentIndex < this.questions.length - 1) {\n      this.currentIndex++;\n    }\n  }\n\n  onAnswer(isCorrect: boolean) {\n    if (this.currentQuestion) {\n      this.answered.emit({ id: this.currentQuestion.id, isCorrect });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "currentQuestion": {
                    "name": "currentQuestion",
                    "getSignature": {
                        "name": "currentQuestion",
                        "type": "",
                        "returnType": "Question | undefined",
                        "line": 56
                    }
                },
                "totalQuestions": {
                    "name": "totalQuestions",
                    "getSignature": {
                        "name": "totalQuestions",
                        "type": "number",
                        "returnType": "number",
                        "line": 60
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-a132fb8763e78ed6e9d2dd6f1d4dbb09e54ecd6450bbf5580a7189dd7a00b6331399868515c63de2fe5360c5c4bfc94bfc77416e0b68bc214cf06e40862a26c3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { InjectionToken, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { QuestionListComponent } from './question-list/question-list.component';\nimport { QuestionRepositoryImpl } from 'src/app/infrastructure/repositories/question.repository.impl';\nimport { QuestionRepository } from 'src/app/core/repositories/question.repository';\nimport { ProgressBarComponent } from './question-list/progress-bar/progress-bar.component';\nimport { QuestionCardComponent } from './question-list/question-card/question-card.component';\nimport { CategorySelectionComponent } from './category-selection/category-selection.component';\nimport { QuestionViewerComponent } from './question-viewer/question-viewer.component';\nimport { NavigationComponent } from './navigation/navigation.component';\nimport { LandingPageComponent } from './landing-page/landing-page.component';\nimport { PricingPageComponent } from './pricing-page/pricing-page.component';\n\nexport const IQuestionRepository = new InjectionToken<QuestionRepository>('QuestionRepository');\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QuestionListComponent,\n    ProgressBarComponent,\n    QuestionCardComponent,\n    CategorySelectionComponent,\n    QuestionViewerComponent,\n    NavigationComponent,\n    LandingPageComponent,\n    PricingPageComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [\n      { provide: IQuestionRepository, useValue: new QuestionRepositoryImpl() }\n\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CategorySelectionComponent"
                        },
                        {
                            "name": "LandingPageComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "PricingPageComponent"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "QuestionCardComponent"
                        },
                        {
                            "name": "QuestionListComponent"
                        },
                        {
                            "name": "QuestionViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f3e80ece5c122fd0a034574a0a05806214a052ee78f8292dc399b1b5a376f9686270edf7733a1cae65f3f1457776d1deb08ac0dbd512b56e713619e711cc0b00",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LandingPageComponent } from './landing-page/landing-page.component';\nimport { PricingPageComponent } from './pricing-page/pricing-page.component';\nimport { QuestionListComponent } from './question-list/question-list.component';\n\nexport const routes: Routes = [\n  { path: '', component: LandingPageComponent },\n  { path: 'questions', component: QuestionListComponent },\n  { path: 'pricing', component: PricingPageComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "backendDevelopmentQuestions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/infrastructure/repositories/questions-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  \"Explain dependency injection and its benefits\",\n  \"What are microservices and when should they be used?\",\n  \"Explain the CAP theorem\",\n  \"What is eventual consistency?\",\n  \"How do you handle distributed transactions?\",\n  // ... (continue with more questions)\n]"
            },
            {
                "name": "CATEGORIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/models/category.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Category[]",
                "defaultValue": "[\n  {\n    id: 'software-craftsmanship',\n    name: 'Software Craftsmanship',\n    description: 'Questions about TDD, Clean Code, and software design principles'\n  },\n  {\n    id: 'backend-development',\n    name: 'Backend Development',\n    description: 'Questions about server-side programming and architecture'\n  },\n  {\n    id: 'frontend-development',\n    name: 'Frontend Development',\n    description: 'Questions about client-side development and UI/UX'\n  }\n]"
            },
            {
                "name": "frontendDevelopmentQuestions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/infrastructure/repositories/questions-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  \"What is the Virtual DOM and how does it work?\",\n  \"Explain the concept of state management\",\n  \"What are Web Components?\",\n  \"Explain the difference between server-side and client-side rendering\",\n  \"What are Progressive Web Apps (PWAs)?\",\n  // ... (continue with more questions)\n]"
            },
            {
                "name": "IQuestionRepository",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<QuestionRepository>('QuestionRepository')"
            },
            {
                "name": "QUESTION_COUNT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/models/category.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { value: 10, label: '10 Questions' },\n  { value: 25, label: '25 Questions' },\n  { value: 50, label: '50 Questions' }\n]"
            },
            {
                "name": "softwareCraftmanshipQuestions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/infrastructure/repositories/questions-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  \"Explain Test-Driven Development (TDD) and its benefits\",\n  \"What are the SOLID principles and why are they important?\",\n  \"Explain the concept of Clean Architecture\",\n  \"What is Domain-Driven Design (DDD)?\",\n  \"How do you handle technical debt?\",\n  // ... (continue with more questions)\n]"
            }
        ],
        "functions": [
            {
                "name": "generateQuestions",
                "file": "src/app/infrastructure/repositories/questions-data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Question[]"
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/infrastructure/repositories/questions-data.ts": [
                {
                    "name": "backendDevelopmentQuestions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/infrastructure/repositories/questions-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  \"Explain dependency injection and its benefits\",\n  \"What are microservices and when should they be used?\",\n  \"Explain the CAP theorem\",\n  \"What is eventual consistency?\",\n  \"How do you handle distributed transactions?\",\n  // ... (continue with more questions)\n]"
                },
                {
                    "name": "frontendDevelopmentQuestions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/infrastructure/repositories/questions-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  \"What is the Virtual DOM and how does it work?\",\n  \"Explain the concept of state management\",\n  \"What are Web Components?\",\n  \"Explain the difference between server-side and client-side rendering\",\n  \"What are Progressive Web Apps (PWAs)?\",\n  // ... (continue with more questions)\n]"
                },
                {
                    "name": "softwareCraftmanshipQuestions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/infrastructure/repositories/questions-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  \"Explain Test-Driven Development (TDD) and its benefits\",\n  \"What are the SOLID principles and why are they important?\",\n  \"Explain the concept of Clean Architecture\",\n  \"What is Domain-Driven Design (DDD)?\",\n  \"How do you handle technical debt?\",\n  // ... (continue with more questions)\n]"
                }
            ],
            "src/app/core/models/category.model.ts": [
                {
                    "name": "CATEGORIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/models/category.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "defaultValue": "[\n  {\n    id: 'software-craftsmanship',\n    name: 'Software Craftsmanship',\n    description: 'Questions about TDD, Clean Code, and software design principles'\n  },\n  {\n    id: 'backend-development',\n    name: 'Backend Development',\n    description: 'Questions about server-side programming and architecture'\n  },\n  {\n    id: 'frontend-development',\n    name: 'Frontend Development',\n    description: 'Questions about client-side development and UI/UX'\n  }\n]"
                },
                {
                    "name": "QUESTION_COUNT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/models/category.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { value: 10, label: '10 Questions' },\n  { value: 25, label: '25 Questions' },\n  { value: 50, label: '50 Questions' }\n]"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "IQuestionRepository",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<QuestionRepository>('QuestionRepository')"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/infrastructure/repositories/questions-data.ts": [
                {
                    "name": "generateQuestions",
                    "file": "src/app/infrastructure/repositories/questions-data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Question[]"
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "LandingPageComponent"
                    },
                    {
                        "path": "questions",
                        "component": "QuestionListComponent"
                    },
                    {
                        "path": "pricing",
                        "component": "PricingPageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IQuestionRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/category-selection/category-selection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategorySelectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/question.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuestionImpl",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/question.entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Question",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/category.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/category.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CATEGORIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/category.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QUESTION_COUNT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/repositories/question.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuestionRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/use-cases/get-questions-by-category.use-case.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GetQuestionsByCategoryUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/use-cases/get-questions.use-case.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GetQuestionsUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/use-cases/mark-questions-answered.use-case.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MarkQuestionAnsweredUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/infrastructure/repositories/question.repository.impl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuestionRepositoryImpl",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/infrastructure/repositories/questions-data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateQuestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/infrastructure/repositories/questions-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "backendDevelopmentQuestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/infrastructure/repositories/questions-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "frontendDevelopmentQuestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/infrastructure/repositories/questions-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "softwareCraftmanshipQuestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/landing-page/landing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pricing-page/pricing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PricingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/question-list/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/question-list/question-card/question-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuestionCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/question-list/question-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuestionListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/question-viewer/question-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuestionViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}